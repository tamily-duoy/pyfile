1.1  构建树
在列表实现树时，我们将存储根节点作为列表的第一个元素的值。列表的第二个元素的本身是一个表示左子树的列表。这个列表的第三个元素表示在右子树的另一个列表。为了说明这个存储结构。

例子说明：
树的根是myTree[0]，根的左子树是myTree[1]，和右子树是myTree[2]。

1.2  简单树
1.3  定义一些函数，使我们很容易像使用列表一样操作树。请注意，我们不会去定义一个二叉树类。
说明：该二叉树只是构建一个根节点和两个空子节点的列表。左子树添加到树的根，我们需要插入一个新的列表到根列表的第二个位置。我们必须注意，如果列表中已经有值在第二个位置，我们需要跟踪它，将新节点插入树中作为其直接的左子节点。Listing 1 显示了插入左子节点。

1.4   Listing 1 显示了插入左子节点。
说明：
插入一个左子节点，我们首先获取对应于当前左子节点的列表（可能是空的）。然后，我们添加新的左子节点，将原来的左子节点作为新节点的左子节点。这使我们能够将新节点插入到树中的任何位置。对于insertRight的代码类似于insertLeft，如Listing 2 中。

1.5   对于insertRight的代码类似于insertLeft，如Listing 2 中。

1.6  为了完善树的实现（参见Listing3），让我们写几个用于获取和设置根值的函数，以及获得左边或右边子树的函数。

