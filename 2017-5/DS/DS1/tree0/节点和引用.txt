我们第二种表示树的方式――节点和引用。

1.7   节点和引用

在这种情况下，我们将定义具有根，以及左右子树属性的类。由于这种表示更紧密地结合了面向对象的方式，我们将继续使用这种表示完成本章的其余部分。

使用节点和引用，我们认为该树的结构类似于图 2 所示。

1.8  我们将开始用简单的节点和引用的类定义如Listing 4 所示。重要的是要记住这种表示的是左右子树引用的是其他二叉树的实例。例如，当我们插入一个新的左子节点到树上时，我们创建了二叉树的另一个实例，修改了根节点的self leftChild使之指向新的树。

注意Listing 4 中，构造函数需要得到一些类型的对象存储在根中。就像你可以在列表中存储你喜欢的任何一种类型，树的根对象可以指向任何一种类型。对于我们之前的例子中，我们将存储节点设为根值的名称。使用节点和引用来表示图 2 中的树，我们将创建二叉树类的 6 个实例。



1.9  接下来让我们看一下我们需要构建的根节点以外的函数。为了添加左子节点，我们将创建一个新的二叉树，并设置根的左属性以指向这个新对象。insertLeft的代码Listing 5 所示。

我们必须考虑两种情况进行插入。第一种情况是，没有左子节点。当没有左子节点时，将新节点添加即可。第二种情况的特征是，当前存在左子节点。在第二种情况下，我们插入一个节点并将之前的子节点降一级。第二种情况是由else语句在Listing 5的第 4 行进行处理。

1.10  对于insertRight的代码必须考虑一个对称的情况。要么没有右子节点，要么我们必须插入根和现有的右子节点之间。插入代码Listing 6 所示。

1.11  为了完成一个简单的二叉树数据结构的定义，我们写出访问（参见Listing 7）左右子节点和根值的方法。

1.12  既然我们已经有了所有创建和操作二叉树的方法，让我们再进一步检查它的结构。让我们把每一个节点比作一个简单的树的根，并添加节点 B 和 C 作为子节点。 下面的代码就是创建树，并存储一些键值，为左右子节点赋值。注意，左右子节点和根都是同一个二叉树类的不同对象。正如我们之前树的定义中说的，我们能够把一个二叉树的任何子节点当成二叉树来做处理。

